{"/home/travis/build/npmtest/node-npmtest-mixpanel/test.js":"/* istanbul instrument in package npmtest_mixpanel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mixpanel/lib.npmtest_mixpanel.js":"/* istanbul instrument in package npmtest_mixpanel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mixpanel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mixpanel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mixpanel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mixpanel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mixpanel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mixpanel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mixpanel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mixpanel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mixpanel.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mixpanel.__dirname +\n                    '/lib.npmtest_mixpanel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mixpanel/node_modules/mixpanel/lib/mixpanel-node.js":"/*\n    Heavily inspired by the original js library copyright Mixpanel, Inc.\n    (http://mixpanel.com/)\n\n    Copyright (c) 2012 Carl Sverre\n\n    Released under the MIT license.\n*/\n\nvar http            = require('http'),\n    https           = require('https'),\n    querystring     = require('querystring'),\n    Buffer          = require('buffer').Buffer,\n    util            = require('util'),\n    HttpsProxyAgent = require('https-proxy-agent');\n\nvar async_all = require('./utils').async_all;\n\nvar REQUEST_LIBS = {\n    http: http,\n    https: https\n};\n\nvar create_proxy_agent = function() {\n    var proxyPath = process.env.HTTPS_PROXY || process.env.HTTP_PROXY;\n    return proxyPath ? new HttpsProxyAgent(proxyPath) : null;\n}\n\nvar create_client = function(token, config) {\n    var metrics = {};\n    var proxyAgent = create_proxy_agent();\n\n    // mixpanel constants\n    var MAX_BATCH_SIZE = 50,\n        TRACK_AGE_LIMIT = 60 * 60 * 24 * 5;\n\n    if(!token) {\n        throw new Error(\"The Mixpanel Client needs a Mixpanel token: `init(token)`\");\n    }\n\n    // Default config\n    metrics.config = {\n        test: false,\n        debug: false,\n        verbose: false,\n        host: 'api.mixpanel.com',\n        protocol: 'http'\n    };\n\n    metrics.token = token;\n\n    /**\n     * sends an async GET or POST request to mixpanel\n     * for batch processes data must be send in the body of a POST\n     * @param {object} options\n     * @param {string} options.endpoint\n     * @param {object} options.data         the data to send in the request\n     * @param {string} [options.method]     e.g. `get` or `post`, defaults to `get`\n     * @param {function} callback           called on request completion or error\n     */\n    metrics.send_request = function(options, callback) {\n        callback = callback || function() {};\n\n        var content = (new Buffer(JSON.stringify(options.data))).toString('base64'),\n            endpoint = options.endpoint,\n            method = (options.method || 'GET').toUpperCase(),\n            query_params = {\n                'ip': 0,\n                'verbose': metrics.config.verbose ? 1 : 0\n            },\n            key = metrics.config.key,\n            request_lib = REQUEST_LIBS[metrics.config.protocol],\n            request_options = {\n                host: metrics.config.host,\n                port: metrics.config.port,\n                headers: {},\n                method: method\n            },\n            request;\n\n        if (!request_lib) {\n            throw new Error(\n                \"Mixpanel Initialization Error: Unsupported protocol \" + metrics.config.protocol + \". \" +\n                \"Supported protocols are: \" + Object.keys(REQUEST_LIBS)\n            );\n        }\n\n\n        if (method === 'POST') {\n            content = 'data=' + content;\n            request_options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            request_options.headers['Content-Length'] = Buffer.byteLength(content);\n        } else if (method === 'GET') {\n            query_params.data = content;\n        }\n\n\n        // add `key` query params\n        if (key) {\n            query_params.api_key = key;\n        } else if (endpoint === '/import') {\n            throw new Error(\"The Mixpanel Client needs a Mixpanel api key when importing old events: `init(token, { key: ... })`\");\n        }\n\n        if (proxyAgent) {\n            request_options.agent = proxyAgent;\n        }\n\n        if (metrics.config.test) {\n            query_params.test = 1;\n        }\n\n        request_options.path = endpoint + \"?\" + querystring.stringify(query_params);\n\n        request = request_lib.request(request_options, function(res) {\n            var data = \"\";\n            res.on('data', function(chunk) {\n                data += chunk;\n            });\n\n            res.on('end', function() {\n                var e;\n                if (metrics.config.verbose) {\n                    try {\n                        var result = JSON.parse(data);\n                        if(result.status != 1) {\n                            e = new Error(\"Mixpanel Server Error: \" + result.error);\n                        }\n                    }\n                    catch(ex) {\n                        e = new Error(\"Could not parse response from Mixpanel\");\n                    }\n                }\n                else {\n                    e = (data !== '1') ? new Error(\"Mixpanel Server Error: \" + data) : undefined;\n                }\n\n                callback(e);\n            });\n        });\n\n        request.on('error', function(e) {\n            if (metrics.config.debug) {\n                console.log(\"Got Error: \" + e.message);\n            }\n            callback(e);\n        });\n\n        if (method === 'POST') {\n            request.write(content);\n        }\n        request.end();\n    };\n\n    /**\n     * Send an event to Mixpanel, using the specified endpoint (e.g., track/import)\n     * @param {string} endpoint - API endpoint name\n     * @param {string} event - event name\n     * @param {object} properties - event properties\n     * @param {Function} [callback] - callback for request completion/error\n     */\n    metrics.send_event_request = function(endpoint, event, properties, callback) {\n        properties.token = metrics.token;\n        properties.mp_lib = \"node\";\n\n        var data = {\n            event: event,\n            properties: properties\n        };\n\n        if (metrics.config.debug) {\n            console.log(\"Sending the following event to Mixpanel:\\n\", data);\n        }\n\n        metrics.send_request({ method: \"GET\", endpoint: endpoint, data: data }, callback);\n    };\n\n    /**\n     * Validate type of time property, and convert to Unix timestamp if necessary\n     * @param {Date|number} time - value to check\n     * @returns {number} Unix timestamp\n     */\n    var ensure_timestamp = function(time) {\n        if (!(time instanceof Date || typeof time === \"number\")) {\n            throw new Error(\"`time` property must be a Date or Unix timestamp and is only required for `import` endpoint\");\n        }\n        return time instanceof Date ? Math.floor(time.getTime() / 1000) : time;\n    };\n\n    /**\n     * breaks array into equal-sized chunks, with the last chunk being the remainder\n     * @param {Array} arr\n     * @param {number} size\n     * @returns {Array}\n     */\n    var chunk = function(arr, size) {\n        var chunks = [],\n            i = 0,\n            total = arr.length;\n\n        while (i < total) {\n            chunks.push(arr.slice(i, i += size));\n        }\n        return chunks;\n    };\n\n    /**\n     * sends events in batches\n     * @param {object}   options\n     * @param {[{}]}     options.event_list                 array of event objects\n     * @param {string}   options.endpoint                   e.g. `/track` or `/import`\n     * @param {number}   [options.max_concurrent_requests]  limits concurrent async requests over the network\n     * @param {number}   [options.max_batch_size]           limits number of events sent to mixpanel per request\n     * @param {Function} [callback]                         callback receives array of errors if any\n     *\n     */\n    var send_batch_requests = function(options, callback) {\n        var event_list = options.event_list,\n            endpoint = options.endpoint,\n            max_batch_size = options.max_batch_size ? Math.min(MAX_BATCH_SIZE, options.max_batch_size) : MAX_BATCH_SIZE,\n            // to maintain original intention of max_batch_size; if max_batch_size is greater than 50, we assume the user is trying to set max_concurrent_requests\n            max_concurrent_requests = options.max_concurrent_requests || (options.max_batch_size > MAX_BATCH_SIZE && Math.ceil(options.max_batch_size / MAX_BATCH_SIZE)),\n            event_batches = chunk(event_list, max_batch_size),\n            request_batches = max_concurrent_requests ? chunk(event_batches, max_concurrent_requests) : [event_batches],\n            total_event_batches = event_batches.length,\n            total_request_batches = request_batches.length;\n\n        /**\n         * sends a batch of events to mixpanel through http api\n         * @param {Array} batch\n         * @param {Function} cb\n         */\n        function send_event_batch(batch, cb) {\n            if (batch.length > 0) {\n                batch = batch.map(function (event) {\n                    var properties = event.properties;\n\n                    if (endpoint === '/import' || event.properties.time) {\n                        // usually there will be a time property, but not required for `/track` endpoint\n                        event.properties.time = ensure_timestamp(event.properties.time);\n                    }\n                    event.properties.token = event.properties.token || metrics.token;\n                    return event;\n                });\n\n                // must be a POST\n                metrics.send_request({ method: \"POST\", endpoint: endpoint, data: batch }, cb);\n            }\n        }\n\n        /**\n         * Asynchronously sends batches of requests\n         * @param {number} index\n         */\n        function send_next_request_batch(index) {\n            var request_batch = request_batches[index],\n                cb = function (errors, results) {\n                    index += 1;\n                    if (index === total_request_batches) {\n                        callback && callback(errors, results);\n                    } else {\n                        send_next_request_batch(index);\n                    }\n                };\n\n            async_all(request_batch, send_event_batch, cb);\n        }\n\n        // init recursive function\n        send_next_request_batch(0);\n\n        if (metrics.config.debug) {\n            console.log(\n                \"Sending \" + event_list.length + \" events to Mixpanel in \" +\n                total_event_batches + \" batches of events and \" +\n                total_request_batches + \" batches of requests\"\n            );\n        }\n    };\n\n    /**\n         track(event, properties, callback)\n         ---\n         this function sends an event to mixpanel.\n\n         event:string                    the event name\n         properties:object               additional event properties to send\n         callback:function(err:Error)    callback is called when the request is\n                                         finished or an error occurs\n     */\n    metrics.track = function(event, properties, callback) {\n        if (!properties || typeof properties === \"function\") {\n            callback = properties;\n            properties = {};\n        }\n\n        // time is optional for `track` but must be less than 5 days old if set\n        if (properties.time) {\n            properties.time = ensure_timestamp(properties.time);\n            if (properties.time < Date.now() / 1000 - TRACK_AGE_LIMIT) {\n                throw new Error(\"`track` not allowed for event more than 5 days old; use `mixpanel.import()`\");\n            }\n        }\n\n        metrics.send_event_request(\"/track\", event, properties, callback);\n    };\n\n    /**\n     * send a batch of events to mixpanel `track` endpoint: this should only be used if events are less than 5 days old\n     * @param {Array}    event_list                         array of event objects to track\n     * @param {object}   [options]\n     * @param {number}   [options.max_concurrent_requests]  number of concurrent http requests that can be made to mixpanel\n     * @param {number}   [options.max_batch_size]           number of events that can be sent to mixpanel per request\n     * @param {Function} [callback]                         callback receives array of errors if any\n     */\n    metrics.track_batch = function(event_list, options, callback) {\n        options = options || {};\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        var batch_options = {\n            event_list: event_list,\n            endpoint: \"/track\",\n            max_concurrent_requests: options.max_concurrent_requests,\n            max_batch_size: options.max_batch_size\n        };\n\n        send_batch_requests(batch_options, callback);\n    };\n\n    /**\n        import(event, time, properties, callback)\n        ---\n        This function sends an event to mixpanel using the import\n        endpoint.  The time argument should be either a Date or Number,\n        and should signify the time the event occurred.\n\n        It is highly recommended that you specify the distinct_id\n        property for each event you import, otherwise the events will be\n        tied to the IP address of the sending machine.\n\n        For more information look at:\n        https://mixpanel.com/docs/api-documentation/importing-events-older-than-31-days\n\n        event:string                    the event name\n        time:date|number                the time of the event\n        properties:object               additional event properties to send\n        callback:function(err:Error)    callback is called when the request is\n                                        finished or an error occurs\n    */\n    metrics.import = function(event, time, properties, callback) {\n        if (!properties || typeof properties === \"function\") {\n            callback = properties;\n            properties = {};\n        }\n\n        properties.time = ensure_timestamp(time);\n\n        metrics.send_event_request(\"/import\", event, properties, callback);\n    };\n\n    /**\n        import_batch(event_list, options, callback)\n        ---\n        This function sends a list of events to mixpanel using the import\n        endpoint. The format of the event array should be:\n\n        [\n            {\n                \"event\": \"event name\",\n                \"properties\": {\n                    \"time\": new Date(), // Number or Date; required for each event\n                    \"key\": \"val\",\n                    ...\n                }\n            },\n            {\n                \"event\": \"event name\",\n                \"properties\": {\n                    \"time\": new Date()  // Number or Date; required for each event\n                }\n            },\n            ...\n        ]\n\n        See import() for further information about the import endpoint.\n\n        Options:\n            max_batch_size: the maximum number of events to be transmitted over\n                            the network simultaneously. useful for capping bandwidth\n                            usage.\n            max_concurrent_requests: the maximum number of concurrent http requests that\n                            can be made to mixpanel; also useful for capping bandwidth.\n\n        N.B.: the Mixpanel API only accepts 50 events per request, so regardless\n        of max_batch_size, larger lists of events will be chunked further into\n        groups of 50.\n\n        event_list:array                    list of event names and properties\n        options:object                      optional batch configuration\n        callback:function(error_list:array) callback is called when the request is\n                                            finished or an error occurs\n    */\n    metrics.import_batch = function(event_list, options, callback) {\n        var batch_options;\n\n        if (typeof(options) === \"function\" || !options) {\n            callback = options;\n            options = {};\n        }\n        batch_options = {\n            event_list: event_list,\n            endpoint: \"/import\",\n            max_concurrent_requests: options.max_concurrent_requests,\n            max_batch_size: options.max_batch_size\n        };\n        send_batch_requests(batch_options, callback);\n    };\n\n    /**\n        alias(distinct_id, alias)\n        ---\n        This function creates an alias for distinct_id\n\n        For more information look at:\n        https://mixpanel.com/docs/integration-libraries/using-mixpanel-alias\n\n        distinct_id:string              the current identifier\n        alias:string                    the future alias\n    */\n    metrics.alias = function(distinct_id, alias, callback) {\n        var properties = {\n            distinct_id: distinct_id,\n            alias: alias\n        };\n\n        metrics.track('$create_alias', properties, callback);\n    };\n\n    metrics.people = {\n        /** people.set_once(distinct_id, prop, to, modifiers, callback)\n            ---\n            The same as people.set but in the words of mixpanel:\n            mixpanel.people.set_once\n\n            \" This method allows you to set a user attribute, only if\n             it is not currently set. It can be called multiple times\n             safely, so is perfect for storing things like the first date\n             you saw a user, or the referrer that brought them to your\n             website for the first time. \"\n\n        */\n        set_once: function(distinct_id, prop, to, modifiers, callback) {\n            var $set = {};\n\n            if (typeof(prop) === 'object') {\n                if (typeof(to) === 'object') {\n                    callback = modifiers;\n                    modifiers = to;\n                } else {\n                    callback = to;\n                }\n                $set = prop;\n            } else {\n                $set[prop] = to;\n                if (typeof(modifiers) === 'function' || !modifiers) {\n                    callback = modifiers;\n                }\n            }\n\n            modifiers = modifiers || {};\n            modifiers.set_once = true;\n\n            this._set(distinct_id, $set, callback, modifiers);\n        },\n\n        /**\n            people.set(distinct_id, prop, to, modifiers, callback)\n            ---\n            set properties on an user record in engage\n\n            usage:\n\n                mixpanel.people.set('bob', 'gender', 'm');\n\n                mixpanel.people.set('joe', {\n                    'company': 'acme',\n                    'plan': 'premium'\n                });\n        */\n        set: function(distinct_id, prop, to, modifiers, callback) {\n            var $set = {};\n\n            if (typeof(prop) === 'object') {\n                if (typeof(to) === 'object') {\n                    callback = modifiers;\n                    modifiers = to;\n                } else {\n                    callback = to;\n                }\n                $set = prop;\n            } else {\n                $set[prop] = to;\n                if (typeof(modifiers) === 'function' || !modifiers) {\n                    callback = modifiers;\n                }\n            }\n\n            this._set(distinct_id, $set, callback, modifiers);\n        },\n\n        // used internally by set and set_once\n        _set: function(distinct_id, $set, callback, options) {\n            options = options || {};\n            var set_key = (options && options.set_once) ? \"$set_once\" : \"$set\";\n\n            var data = {\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n            data[set_key] = $set;\n\n            if ('ip' in $set) {\n                data.$ip = $set.ip;\n                delete $set.ip;\n            }\n\n            if ($set.$ignore_time) {\n                data.$ignore_time = $set.$ignore_time;\n                delete $set.$ignore_time;\n            }\n\n            data = merge_modifiers(data, options);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n            people.increment(distinct_id, prop, by, modifiers, callback)\n            ---\n            increment/decrement properties on an user record in engage\n\n            usage:\n\n                mixpanel.people.increment('bob', 'page_views', 1);\n\n                // or, for convenience, if you're just incrementing a counter by 1, you can\n                // simply do\n                mixpanel.people.increment('bob', 'page_views');\n\n                // to decrement a counter, pass a negative number\n                mixpanel.people.increment('bob', 'credits_left', -1);\n\n                // like mixpanel.people.set(), you can increment multiple properties at once:\n                mixpanel.people.increment('bob', {\n                    counter1: 1,\n                    counter2: 3,\n                    counter3: -2\n                });\n        */\n        increment: function(distinct_id, prop, by, modifiers, callback) {\n            var $add = {};\n\n            if (typeof(prop) === 'object') {\n                if (typeof(by) === 'object') {\n                    callback = modifiers;\n                    modifiers = by;\n                } else {\n                    callback = by;\n                }\n                Object.keys(prop).forEach(function(key) {\n                    var val = prop[key];\n\n                    if (isNaN(parseFloat(val))) {\n                        if (metrics.config.debug) {\n                            console.error(\"Invalid increment value passed to mixpanel.people.increment - must be a number\");\n                            console.error(\"Passed \" + key + \":\" + val);\n                        }\n                        return;\n                    } else {\n                        $add[key] = val;\n                    }\n                });\n            } else {\n                if (typeof(by) === 'number' || !by) {\n                    by = by || 1;\n                    $add[prop] = by;\n                    if (typeof(modifiers) === 'function') {\n                        callback = modifiers;\n                    }\n                } else if (typeof(by) === 'function') {\n                    callback = by;\n                    $add[prop] = 1;\n                } else {\n                    callback = modifiers;\n                    modifiers = (typeof(by) === 'object') ? by : {};\n                    $add[prop] = 1;\n                }\n            }\n\n            var data = {\n                '$add': $add,\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n            people.append(distinct_id, prop, value, modifiers, callback)\n            ---\n            Append a value to a list-valued people analytics property.\n\n            usage:\n\n                // append a value to a list, creating it if needed\n                mixpanel.people.append('pages_visited', 'homepage');\n\n                // like mixpanel.people.set(), you can append multiple properties at once:\n                mixpanel.people.append({\n                    list1: 'bob',\n                    list2: 123\n                });\n        */\n        append: function(distinct_id, prop, value, modifiers, callback) {\n            var $append = {};\n\n            if (typeof(prop) === 'object') {\n                if (typeof(value) === 'object') {\n                    callback = modifiers;\n                    modifiers = value;\n                } else {\n                    callback = value;\n                }\n                Object.keys(prop).forEach(function(key) {\n                    $append[key] = prop[key];\n                });\n            } else {\n                $append[prop] = value;\n                if (typeof(modifiers) === 'function') {\n                    callback = modifiers;\n                }\n            }\n\n            var data = {\n                '$append': $append,\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n            people.track_charge(distinct_id, amount, properties, modifiers, callback)\n            ---\n            Record that you have charged the current user a certain\n            amount of money.\n\n            usage:\n\n                // charge a user $29.99\n                mixpanel.people.track_charge('bob', 29.99);\n\n                // charge a user $19 on the 1st of february\n                mixpanel.people.track_charge('bob', 19, { '$time': new Date('feb 1 2012') });\n        */\n        track_charge: function(distinct_id, amount, properties, modifiers, callback) {\n            if (typeof(properties) === 'function' || !properties) {\n                callback = properties || function() {};\n                properties = {};\n            } else {\n                if (typeof(modifiers) === 'function' || !modifiers) {\n                    callback = modifiers || function() {};\n                    if (properties.$ignore_time || properties.hasOwnProperty(\"$ip\")) {\n                        modifiers = {};\n                        Object.keys(properties).forEach(function(key) {\n                            modifiers[key] = properties[key];\n                            delete properties[key];\n                        });\n                    }\n                }\n            }\n\n            if (typeof(amount) !== 'number') {\n                amount = parseFloat(amount);\n                if (isNaN(amount)) {\n                    console.error(\"Invalid value passed to mixpanel.people.track_charge - must be a number\");\n                    return;\n                }\n            }\n\n            properties.$amount = amount;\n\n            if (properties.hasOwnProperty('$time')) {\n                var time = properties.$time;\n                if (Object.prototype.toString.call(time) === '[object Date]') {\n                    properties.$time = time.toISOString();\n                }\n            }\n\n            var data = {\n                '$append': { '$transactions': properties },\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n            people.clear_charges(distinct_id, modifiers, callback)\n            ---\n            Clear all the current user's transactions.\n\n            usage:\n\n                mixpanel.people.clear_charges('bob');\n        */\n        clear_charges: function(distinct_id, modifiers, callback) {\n            var data = {\n                '$set': { '$transactions': [] },\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            if (typeof(modifiers) === 'function') { callback = modifiers; }\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Clearing this user's charges:\", distinct_id);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n            people.delete_user(distinct_id, modifiers, callback)\n            ---\n            delete an user record in engage\n\n            usage:\n\n                mixpanel.people.delete_user('bob');\n        */\n        delete_user: function(distinct_id, modifiers, callback) {\n            var data = {\n                '$delete': '',\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            if (typeof(modifiers) === 'function') { callback = modifiers; }\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Deleting the user from engage:\", distinct_id);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n         people.union(distinct_id, data, modifiers, callback)\n         ---\n         merge value(s) into a list-valued people analytics property.\n\n         usage:\n\n            mixpanel.people.union('bob', {'browsers': 'firefox'});\n\n            mixpanel.people.union('bob', {'browsers', ['chrome'], os: ['linux']});\n         */\n        union: function(distinct_id, data, modifiers, callback) {\n            var $union = {};\n\n            if (typeof(data) !== 'object' || util.isArray(data)) {\n                if (metrics.config.debug) {\n                    console.error(\"Invalid value passed to mixpanel.people.union - data must be an object with array values\");\n                }\n                return;\n            }\n\n            Object.keys(data).forEach(function(key) {\n                var val = data[key];\n                if (util.isArray(val)) {\n                    var merge_values = val.filter(function(v) {\n                        return typeof(v) === 'string' || typeof(v) === 'number';\n                    });\n                    if (merge_values.length > 0) {\n                        $union[key] = merge_values;\n                    }\n                } else if (typeof(val) === 'string' || typeof(val) === 'number') {\n                    $union[key] = [val];\n                } else {\n                    if (metrics.config.debug) {\n                        console.error(\"Invalid argument passed to mixpanel.people.union - values must be a scalar value or array\");\n                        console.error(\"Passed \" + key + ':', val);\n                    }\n                    return;\n                }\n            });\n\n            if (Object.keys($union).length === 0) {\n                return;\n            }\n\n            data = {\n                '$union': $union,\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            if (typeof(modifiers) === 'function') {\n                callback = modifiers;\n            }\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        },\n\n        /**\n         people.unset(distinct_id, prop, modifiers, callback)\n         ---\n         delete a property on an user record in engage\n\n         usage:\n\n            mixpanel.people.unset('bob', 'page_views');\n\n            mixpanel.people.unset('bob', ['page_views', 'last_login']);\n         */\n        unset: function(distinct_id, prop, modifiers, callback) {\n            var $unset = [];\n\n            if (util.isArray(prop)) {\n                $unset = prop;\n            } else if (typeof(prop) === 'string') {\n                $unset = [prop];\n            } else {\n                if (metrics.config.debug) {\n                    console.error(\"Invalid argument passed to mixpanel.people.unset - must be a string or array\");\n                    console.error(\"Passed: \" + prop);\n                }\n                return;\n            }\n\n            var data = {\n                '$unset': $unset,\n                '$token': metrics.token,\n                '$distinct_id': distinct_id\n            };\n\n            if (typeof(modifiers) === 'function') {\n                callback = modifiers;\n            }\n\n            data = merge_modifiers(data, modifiers);\n\n            if (metrics.config.debug) {\n                console.log(\"Sending the following data to Mixpanel (Engage):\");\n                console.log(data);\n            }\n\n            metrics.send_request({ method: \"GET\", endpoint: \"/engage\", data: data }, callback);\n        }\n    };\n\n    var merge_modifiers = function(data, modifiers) {\n        if (modifiers) {\n            if (modifiers.$ignore_alias) {\n                data.$ignore_alias = modifiers.$ignore_alias;\n            }\n            if (modifiers.$ignore_time) {\n                data.$ignore_time = modifiers.$ignore_time;\n            }\n            if (modifiers.hasOwnProperty(\"$ip\")) {\n                data.$ip = modifiers.$ip;\n            }\n            if (modifiers.hasOwnProperty(\"$time\")) {\n                data.$time = ensure_timestamp(modifiers.$time);\n            }\n        }\n        return data;\n    };\n\n    /**\n        set_config(config)\n        ---\n        Modifies the mixpanel config\n\n        config:object       an object with properties to override in the\n                            mixpanel client config\n    */\n    metrics.set_config = function(config) {\n        for (var c in config) {\n            if (config.hasOwnProperty(c)) {\n                if (c == \"host\") { // Split host, into host and port.\n                    metrics.config.host = config[c].split(':')[0];\n                    var port = config[c].split(':')[1];\n                    if (port) {\n                        metrics.config.port = Number(port);\n                    }\n                } else {\n                    metrics.config[c] = config[c];\n                }\n            }\n        }\n    };\n\n    if (config) {\n        metrics.set_config(config);\n    }\n\n    return metrics;\n};\n\n// module exporting\nmodule.exports = {\n    Client: function(token) {\n        console.warn(\"The function `Client(token)` is deprecated.  It is now called `init(token)`.\");\n        return create_client(token);\n    },\n    init: create_client\n};\n","/home/travis/build/npmtest/node-npmtest-mixpanel/node_modules/mixpanel/lib/utils.js":"/**\n * helper to wait for all callbacks to complete; similar to `Promise.all`\n * exposed to metrics object for unit tests\n * @param {Array} requests\n * @param {Function} handler\n * @param {Function} callback\n */\nexports.async_all = function(requests, handler, callback) {\n    var total = requests.length,\n        errors = null,\n        results = [],\n        done = function (err, result) {\n            if (err) {\n                // errors are `null` unless there is an error, which allows for promisification\n                errors = errors || [];\n                errors.push(err);\n            }\n            results.push(result);\n            if (--total === 0) {\n                callback(errors, results)\n            }\n        };\n\n    if (total === 0) {\n        callback(errors, results);\n    } else {\n        for(var i = 0, l = requests.length; i < l; i++) {\n            handler(requests[i], done);\n        }\n    }\n};\n"}